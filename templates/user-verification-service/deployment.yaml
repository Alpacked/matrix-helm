{{- if .Values.matrix.uvs.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matrix.fullname" . }}-uvs
  labels:
{{ include "matrix.labels" . | indent 4 }}
{{ include "matrix.uvs.labels" . | indent 4}}
spec:
  replicas: {{ default 1 .Values.matrix.uvs.replicaCount  }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "matrix.name" . }}-uvs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "matrix.name" . }}-uvs
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: "uvs"
          image: "{{ .Values.matrix.uvs.image.repository }}:{{ .Values.matrix.uvs.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.matrix.uvs.image.pullPolicy }}
          env:
            - name: UVS_ACCESS_TOKEN
              value: {{ include "matrix.uvs.accessToken" . }}
            - name: UVS_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.fullname" . }}-prosody-uvs
                  key: MATRIX_UVS_AUTH_TOKEN
            - name: UVS_HOMESERVER_URL
              value: {{ include "matrix.baseUrl" . }}
            - name: UVS_DISABLE_IP_BLACKLIST
              value: {{ default "true" .Values.matrix.uvs.disableIpBlacklist | quote }}
            - name: UVS_LISTEN_ADDRESS
              value: "0.0.0.0"
            - name: UVS_PORT
              value: {{ default "3000" .Values.matrix.uvs.service.port | quote }}
            - name: UVS_LOG_LEVEL
              value: {{ default "info" .Values.matrix.uvs.logLevel | quote }}
            - name: UVS_OPENID_VERIFY_ANY_HOMESERVER
              value: {{ include "matrix.hostname" . }}
          ports:
            - name: http
              containerPort: {{ default 3000 .Values.matrix.uvs.service.port | int }}
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /health
              port: http
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /health
              port: http
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /health
              port: http
            timeoutSeconds: 5
            periodSeconds: 10
{{- end }}
